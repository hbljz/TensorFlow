#-*-coding:utf8-*-
__author__ = '何斌'

# from __future__ import print_function##需要注释掉，此行作用是在不小心运行时报错阻止运行
import os
import tensorflow as tf
import random
import tensorflow.examples.tutorials.mnist.input_data as input_data
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)     #下载并加载mnist数据

#系数
def weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(initial)

#偏差
def bias_variable(shape):
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)

#卷积层
def conv2d(x, W):
    # stride [1, x_movement, y_movement, 1]
    # strides[0] =1表示一个卷积核， strides[3] = 1表示卷积核的维度
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')

#池化
def max_pool_2x2(x):
    # stride [1, x_movement, y_movement, 1]
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')

#计算准确率
def compute_accuracy(v_xs, v_ys):
    global prediction
    y_pre = sess.run(prediction, feed_dict={xs: v_xs, keep_prob: 0.8})
    correct_prediction = tf.equal(tf.argmax(y_pre,1), tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    result = sess.run(accuracy, feed_dict={xs: v_xs, ys: v_ys, keep_prob: 0.8})
    return result

# define placeholder for inputs to network
xs = tf.placeholder(tf.float32, [None, 784])# image(28x28)
ys = tf.placeholder(tf.float32, [None, 10])
keep_prob = tf.placeholder(tf.float32)
x_image = tf.reshape(xs, [-1, 28, 28, 1])
# print(x_image.shape)  # [n_samples, 28,28,1]

## conv1 layer ##[n_samples, 28,28,1] ->> [n_samples, 28,28,32]
W_conv1 = weight_variable([5,5, 1,32]) # patch 5x5, in size 1, out size 32
b_conv1 = bias_variable([32])
h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1) 

## pooling layer ##[n_samples, 28,28,32] ->> [n_samples, 14,14,32]
h_pool1 = max_pool_2x2(h_conv1)                                         # output size 14x14x32

## conv2 layer ##[n_samples, 14,14,32] ->> [n_samples, 14,14,64]
W_conv2 = weight_variable([5,5, 32, 64]) # patch 5x5, in size 32, out size 64
b_conv2 = bias_variable([64])
h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)

## pooling layer ##[n_samples, 14,14,64] ->> [n_samples, 7,7,64]
h_pool2 = max_pool_2x2(h_conv2)                                         # output size 7x7x64


# [n_samples, 7, 7, 64] ->> [n_samples, 7*7*64]
h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])

## fc1 layer ##全连接1 #[n_samples, 7*7*64]->>[n_samples, 1024]
W_fc1 = weight_variable([7*7*64,32])
b_fc1 = bias_variable([32])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

## fc2 layer ##全连接2 #[n_samples, 1024]->>[n_samples, 10]
W_fc2 = weight_variable([32, 10])
b_fc2 = bias_variable([10])
prediction = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)


# the error between prediction and real data(交叉熵)
cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),
                                              reduction_indices=[1]))       # loss
train_step = tf.train.AdamOptimizer(0.0003).minimize(cross_entropy)

saver = tf.train.Saver()

#判断模型保存路径是否存在，不存在就创建
if not os.path.exists('18cnn_model/'):
    os.mkdir('18cnn_model/')

#初始化
sess = tf.Session()
if os.path.exists('18cnn_model/checkpoint'): #判断模型是否存在
    saver.restore(sess, '18cnn_model/model1.ckpt') #存在就从模型中恢复变量
# important step
# tf.initialize_all_variables() no long valid from
# 2017-03-02 if using tensorflow >= 0.12
elif (int((tf.__version__).split('.')[1]) < 12 and int((tf.__version__).split('.')[0]) < 1):
    init = tf.initialize_all_variables()
else:
    init = tf.global_variables_initializer()
    sess.run(init)

batch_size=50
total_batch = int(mnist.train.num_examples/(batch_size*4))
y=list(range(1,5000))
sample_nums = random.sample(y, 500)

#训练
# for i in range(total_batch):
#     batch_xs, batch_ys = mnist.train.next_batch(batch_size)
#     _,loss_value=sess.run([train_step,cross_entropy], feed_dict={xs: batch_xs, ys: batch_ys, keep_prob: 0.8})
#     if i % 50 == 0:
#         #保存模型到tmp/model.ckpt，注意一定要有一层文件夹，否则保存不成功！！！
#         save_path1 =saver.save(sess, '18cnn_model/model1.ckpt')
#         print("模型保存：%s\n当前训练损失：%s"%(save_path1, loss_value))
#         print("准确率：",compute_accuracy(mnist.test.images[sample_nums], mnist.test.labels[sample_nums]))

#测试
for i in range(5):
    batch_xs, batch_ys = mnist.train.next_batch(batch_size)
    print("当前训练损失：%s"% sess.run(cross_entropy, feed_dict={xs: batch_xs, ys: batch_ys, keep_prob: 0.8}))
    print("准确率：",compute_accuracy(mnist.test.images[sample_nums], mnist.test.labels[sample_nums]))      